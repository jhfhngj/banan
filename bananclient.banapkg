{"ver": "1.1", "name": "banan", "type": "py", "dependent": [], "installplace": "~/", "code": "#!/usr/bin/python3\nimport requests\nimport json\nimport sys\nimport os\nimport signal\nimport hashlib\nimport subprocess\n\ndef scan_with_clamav(filepath):\n    try:\n        result = subprocess.run([\"clamscan\", filepath], capture_output=True, text=True)\n        if \"Infected files: 0\" in result.stdout:\n            return True\n        else:\n            print(\"\u26a0\ufe0f Monkey 5 think this sus super!!!! ME ANGY!!! ME DESTROY WOLD!!!\")\n            print(result.stdout)\n            return False\n    except Exception as e:\n        print(\"ClamAV scan failed:\", e)\n        return False\n\n\ndef verify_checksum(content: str, expected_hash: str) -> bool:\n    try:\n        pkg = json.loads(content)\n        pkg.pop(\"checksum\", None)  # Remove checksum before hashing\n        clean_json = json.dumps(pkg)\n        actual_hash = hashlib.sha512(clean_json.encode()).hexdigest()\n        return actual_hash == expected_hash\n    except Exception as e:\n        print(\"Checksum verification failed:\", e)\n        return False\n\n\nargs = sys.argv\n\ndef resolvepkg(monkeycode):\n    \"\"\"Resolve .banapkg file.\n\n    Plz dont fill the nonexistant \"monkey\" argument, it do nothing because it nonexistant\n\n    Reads the metadata, then installs dependencies and the package itself. (This is a prototype showing the stuff)\"\"\"\n    banana = json.loads(monkeycode)\n    numnum = banana[\"ver\"]\n    name = banana[\"name\"]\n    deps = banana[\"dependent\"]\n    loc = banana[\"installplace\"]\n    code = banana[\"code\"]\n    tipe = banana[\"type\"]\n    has = banana[\"checksum\"]\n    return [numnum, name, tipe, deps, loc, code, has]\n\ndef install(item: str):\n    try:\n        resp = requests.get(f\"https://jhfhngj.github.io/banan/{item}.banapkg\")\n    except requests.exceptions.RequestException as e:\n        print(\"Connection failed:\", e)\n        exit(3)\n\n    if 200 <= resp.status_code < 300:\n        print(\"Installing \" + item)\n\n        ver, name, tipe, depss, loc, code, has = resolvepkg(resp.content.decode())\n        print(\"Hit main\")\n\n        # Ensure install directory exists\n        os.makedirs(os.path.expanduser(loc), exist_ok=True)\n\n        print(\"Writing file\")\n\n        raw_content = resp.content.decode()\n        if not verify_checksum(raw_content, has):\n            print(\"Oo oo aa aa! This sussy baka! Monkey 5 disagree!\")\n            exit(4)\n\n        # Write the package file\n        filepath = os.path.join(os.path.expanduser(loc), f\"{name}_{ver}.{tipe}\")\n        with open(filepath, \"w\") as f:\n            f.write(code)\n\n        print(\"Wrote file\")\n\n        if not scan_with_clamav(filepath):\n            os.remove(filepath)\n            print(\"Removed file\")\n            exit(5)\n\n        # Install dependencies if any\n        if depss:\n            print(\"Installing dependencies for\", item + \".\")\n            installdeps(depss)\n        print(f\"Installed {item} at \"+loc)\n    else:\n        print(\"Package not available.\")\n        exit(3)\n\ndef installdeps(deps: list):\n    for dep in deps:\n        install(dep)\n\ndef show_help():\n    print(\"banan help\\n\")\n    print(\"COMMANDS\")\n    print(\"banan install <package> - Install a package from Banan.\")\n    print(\"banan help - Show this help message.\")\n    print(\"\\nERROR CODES\")\n    print(\"Error code 1 - No package selected.\")\n    print(\"Error code 2 - No inputs.\")\n    print(\"Error code 3 - Package not available.\")\n    print(\"Error code 4 - Hash is wrong. Not shown, but available.\")\n    print(\"Error code 5 - Malware. Not shown, but available.\")\n    print(\"\\n\")\n\n# Entry point\nif len(args) > 1:\n    command = args[1].lower()\n    if command == \"install\":\n        if len(args) < 3:\n            print(\"No package selected! Try \\\"banan help\\\" for help.\")\n            exit(1)\n        install(args[2])\n    elif command == \"help\":\n        show_help()\n    else:\n        print(f\"Unknown command: {args[1]}. Try \\\"banan help\\\" for help.\")\nelse:\n    print(\"No inputs!\")\n    exit(2)\n", "checksum": "d8844e07f6e97dc6d63fa1df19396e9b19382a920adf16e904c798caf29da30ca4e2c0764f787bd13985b04796f695477f86f7140692c4d9b82056be763d38b2"}